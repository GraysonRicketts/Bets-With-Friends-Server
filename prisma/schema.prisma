// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Friend {
  friender User @relation("to_friend", fields: [frienderId], references: [id])
  frienderId String @map("friender_id")

  friended User @relation("from_friend", fields: [friendedId], references: [id])
  friendedId String @map("friended_id")

  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  @@map("friend")
}
model FriendRequest {
  userTo User @relation("to_request", fields: [userToId], references: [id])
  userToId String @map("user_to_id")

  userFrom User @relation("from_request", fields: [userFromId], references: [id])
  userFromId String @map("user_from_id")


  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  @@map("friend_request")
}
model User {
  displayName String @map("display_name")
  email       String @unique @map("user_name")
  score Int @default(300)

  password String?

  friends Friend[] @relation("to_friend")
  friendss Friend[] @relation("from_friend")

  sentFriendRequests FriendRequest[] @relation("from_request")
  receivedFriendRequests FriendRequest[] @relation("to_request")

  userGroup UserGroup[]
  closedBet Bet[]
  wager Wager[]
  

  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  version Int @default(0)

  @@map("user")
}
model UserGroup {
  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id")
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @map("group_id")

  role PrivelegeLevel @default(ADD_MEMBER)

  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  @@map("user_group")
}
enum PrivelegeLevel {
  OWNER
  ADD_MEMBER
  ADD_BET
}

model Group {
  name      String
  userGroups UserGroup[]
  bets       Bet[]
  categories Category[]

  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  @@map("group")
}

model Bet {
  title String

  category Category?  @relation(fields: [categoryId], references: [id])
  categoryId String? @map("category_id")@unique

  wagers Wager[]
  options   Option[]

  closedAt   DateTime? @map("closed_at") @db.Timestamptz(3)
  closedBy   User?     @relation(fields: [closedById], references: [id])
  closedById String?   @map("closed_by_id")

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @map("group_id")


  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  @@map("bet")
}
model Option {
  name String

  bet   Bet    @relation(fields: [betId], references: [id])
  betId String @map("bet_id")

  isFinalOption Boolean @map("is_final_option") @default(false)

  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  @@map("option")
  wager Wager[]
}
model Category {
  name String

  bets   Bet[]
  
  group Group  @relation(fields: [groupId], references: [id])
  groupId String @map("group_id")

  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  @@map("category")
}
model Wager {
  amount Int

  bet   Bet    @relation(fields: [betId], references: [id])
  betId String @map("bet_id")

  option   Option @relation(fields: [optionId], references: [id])
  optionId String @map("option_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  id        String    @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  @@map("wager")
}

model Audit {
  id        String   @id @default(dbgenerated("gen_random_uuid ()"))
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  before    Json?
  diff      Json?
  userId  String? @map("user_id")
  traceId String? @map("trace_id")

  @@map("audit")
}
